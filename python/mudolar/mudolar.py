#!/usr/bin/python
# -*- coding: UTF-8 -*-


#python  模块  (重点)


'''
模块让你能够有逻辑地组织你的Python代码段。
把相关的代码分配到一个 模块里能让你的代码更好用，更易懂。
模块也是Python对象，具有随机的名字属性用来绑定或引用。
简单地说，模块就是一个保存了Python代码的文件。模块能定义函数，类和变量。模块里也能包含可执行的代码。
'''



#导入模块  #import 无论写了多少次import 命令  模块只会被导入一次  （同 oc）
import suport

suport.print_function("nihao world")


#From…import 语句
'''
Python的from语句让你从模块中导入一个指定的部分到当前命名空间中。语法如下：
'''


#From…import* 语句

'''
把一个模块的所有内容全都导入到当前的命名空间也是可行的，只需使用如下声明：
'''


#定位模块

'''
当你导入一个模块，Python解析器对模块位置的搜索顺序是：
当前目录
如果不在当前目录，Python 则搜索在 shell 变量 PYTHONPATH 下的每个目录。
如果都找不到，Python会察看默认路径。UNIX下，默认路径一般为/usr/local/lib/python/。
模块搜索路径存储在system模块的sys.path变量中。变量里包含当前目录，PYTHONPATH和由安装过程决定的默认目录。
'''


#命名空间和作用域

'''
变量是拥有匹配对象的名字（标识符）。命名空间是一个包含了变量名称们（键）和它们各自相应的对象们（值）的字典。
一个Python表达式可以访问局部命名空间和全局命名空间里的变量。如果一个局部变量和一个全局变量重名，则局部变量会覆盖全局变量。
每个函数都有自己的命名空间。类的方法的作用域规则和通常函数的一样。
Python会智能地猜测一个变量是局部的还是全局的，它假设任何在函数内赋值的变量都是局部的。
因此，如果要给全局变量在一个函数里赋值，必须使用global语句。
'''


#eg


money = 100
def addMoney(var):
    "声明一个函数  如果屏蔽到下面一行代码  会出错  money 没有初始值  "
    global money
    money += var
    print money
    print "这个函数内部能访问到的命名",locals()
    return


addMoney(10)
print money


#dir()函数

'''
dir()函数一个排好序的字符串列表，内容是一个模块里定义过的名字。
'''

print dir(suport)




#globals()和locals()函数

'''
根据调用地方的不同，globals()和locals()函数可被用来返回全局和局部命名空间里的名字。
如果在函数内部调用locals()，返回的是所有能在该函数里访问的命名。
如果在函数内部调用globals()，返回的是所有在该函数里能访问的全局名字。
两个函数的返回类型都是字典。所以名字们能用keys()函数摘取。
'''


#reload()函数

'''
当一个模块被导入到一个脚本，模块顶层部分的代码只会被执行一次。
因此，如果你想重新执行模块里顶层部分的代码，可以用reload()函数。该函数会重新导入之前导入过的模块。语法如下
'''


#Python中的包

'''
包是一个分层次的文件目录结构，它定义了一个由模块及子包，和子包下的子包等组成的Python的应用环境。
'''





